#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

const char polibius_table[6][10] = {
    {'С', 'О', 'В', 'У', 'Н', 'Ь', 'Я', 'А', 'Б', 'Г'},
    {'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М'},
    {'П', 'Р', 'Т', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ'},
    {'Ы', 'Э', 'Ю', 'F', 'A', 'S', 'H', 'I', 'O', 'N'},
    {'B', 'C', 'D', 'E', 'G', 'J', 'K', 'L', 'M', 'P'},
    {'Q', 'P', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '#'}
};

unordered_map<char, pair<int, int>>
create_encoding_map() {
    unordered_map<char, pair<int, int>> encoding_map;
    for (int i = 0; i < 6; ++i) {
        for (int j = 0; j < 10; ++j) {
            encoding_map[polibius_table[i][j]] = {i, j};
        }
    }
    return encoding_map;
}

string encrypt_Polibius(const string& text) {
    unordered_map<char, pair<int, int>> encoding_map = create_encoding_map();
    string encrypted;

    for (char c : text) {
        if (encoding_map.find(c) != encoding_map.end()) {
            auto coords = encoding_map[c];
            encrypted += to_string(coords.first) + to_string(coords.second) + " ";
        }
        else {
            encrypted += c;
        }
    }

    return encrypted; 
}

string decrypt_Polibius(const string& encrypted) {
    unordered_map<char, pair<int, int>> encoding_map = create_encoding_map();
    unordered_map<pair<int, int>, char, hash<pair<int, int>>> decoding_map;

    for (const auto& pair : encoding_map) {
        decoding_map[pair.second] = pair.first;
    }

    string decrypted, current_number;
    for (char c : encrypted) {
        if (isdigit(c)) {
            current_number += c;
        }
        else if (c == ' ' && current_number.length() == 2) {
            int row = current_number[0] - '0';
            int col = current_number[1] - '0';
            decrypted += decoding_map[{row, col}];
            current_number.clear();
        }
        else {
            decrypted += c;
        }
    }
    return decrypted;
}

int main() {
    string text;
    cout << "Введите текст: ";
    getline(cin, text); 
    
    string encrypted = encrypt_Polibius(text);
    cout << "Зашифрованный текст: " << endl;

    string decrypted = decrypt_Polibius(text);
    cout << "Дешифрованный текст: " << endl;

    return 0;
}
